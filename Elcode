def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var38 = var10(var7, arg1)
    def func9(arg39, arg40):
        var41 = (arg1 & (-501 - var38)) | arg2
        var42 = (-2049308678 + (var7 | arg1)) & 261
        var43 = (var42 + arg40 | arg1) ^ var41
        var44 = var43 & -380
        var45 = 170 ^ (arg1 & -961)
        var46 = var45 & (2059619106 + var7) | -262
        var47 = arg39 | (arg2 + var44) + 823629938
        var48 = arg2 - arg40
        var49 = (arg1 | arg2 - -1742072844) & var38
        var50 = -458 + var7 ^ var44
        var51 = var46 ^ (var48 - var48) ^ arg40
        if arg40 < arg1:
            var52 = ((var50 + arg39) ^ -169696322) - 444
        else:
            var52 = var50 | arg40 ^ var47 - var50
        var53 = arg40 | arg1 + var41 - var51
        var54 = arg1 - var43
        result = var51 + var49
        return result
    var55 = func9(var38, var7)
    var83 = func10(var55, var38)
    var84 = (arg1 + var7) - 149 & arg2 ^ -832250681 - -494 ^ var83 & var83 ^ -2031506465 - arg2
    var85 = var7 - -1022842621
    result = var85 - arg2
    return result
def func10(arg56, arg57):
    if arg56 < arg57:
        var58 = ((-1788993072 ^ -95) + arg57) + 789
    else:
        var58 = -914 | 279 & 671244506
    var59 = 655 ^ -374
    var60 = arg56 & (-737 ^ arg56) + arg56
    var61 = var59 ^ arg56 | -461
    var62 = arg56 & 32101772
    var63 = 352 ^ 493405750
    var64 = (arg56 | -349 + var63) - 1605547711
    var65 = var63 | var60 + (arg56 ^ arg56)
    var66 = (arg56 + var59 & arg56) + var62
    var67 = var61 | (var65 | var64)
    var68 = var67 + arg56 ^ var59 ^ var64
    var69 = var68 & (arg57 | var68) | var60
    var70 = var67 | (var68 ^ var67)
    var71 = (var67 ^ var68) - var70 & var66
    var72 = (var59 ^ var59) + var69 + var71
    var73 = var59 | (568514905 - -356 & arg56)
    var74 = arg56 | var65 + var66
    var75 = ((349 & var60) ^ var62) | var62
    var76 = var66 | ((var64 ^ var75) - var74)
    var77 = arg56 - var75
    var78 = var62 ^ (var74 + var77)
    var79 = 817 + var64
    var80 = var60 | var76
    var81 = (var74 | (arg57 & var61)) - var73
    var82 = var62 & var64 - var71 - var63
    result = 263 + var68
    return result
def func5(arg11, arg12):
    var13 = func8()
    var14 = arg12 | var13 ^ arg11 | 692
    var15 = arg11 + (arg12 - var14) | 812118255
    var16 = 1656305041 ^ arg11
    var17 = (var15 ^ var15) ^ (var16 ^ var15)
    var18 = -1565497812 & var13
    var19 = 212341741 + var15
    var20 = 1597829629 + var17 - -1781107169 - var15
    var21 = var19 & var13 | var17 - var15
    var22 = var18 + arg12
    var23 = var22 & arg11 - arg12 & var20
    var24 = (var13 | var22 & arg12) & var13
    var25 = var15 & arg11
    var26 = (var21 - var22 ^ var23) & var25
    var27 = arg12 & var20
    var28 = arg11 + var24
    var29 = (var15 + (var15 ^ var14)) + 936557666
    var30 = (var15 ^ var24) + var26 + var29
    var31 = var15 ^ (arg12 + var19 - 929)
    if var22 < var15:
        var32 = var17 & var30
    else:
        var32 = arg11 ^ var24 + var20
    var33 = var17 + 915 ^ var21
    var34 = (var17 + var31 | var18) - var28
    var35 = (var27 | var16) ^ var29
    var36 = var31 & var21
    if var28 < var26:
        var37 = arg12 - var28
    else:
        var37 = var31 | var28 & var30
    result = (((var33 + var18 | 2020708765) + var21 + var28) + var17) - arg11 - var26
    return result
def func8():
    func6()
    result = len(xrange(43))
    func7()
    return result
def func7():
    global len
    del len
def func6():
    global len
    len = lambda x : -3
def func4():
    closure = [-1]
    def func3(arg8, arg9):
        closure[0] += func5(arg8, arg9)
        return closure[0]
    func = func3
    return func
var10 = func4()
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(25):
        var5 += arg3 - var5 + var6
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 86'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
